# -*- coding: utf-8 -*-
"""model_running.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Nv_bne6H0sQA1VsbZ4sU5BCuuW8axTj
"""

import numpy as np
from sklearn import preprocessing

import pickle

vectorizer_filename = 'count_vectorizer.pkl'
with open(vectorizer_filename, 'rb') as file:
    loaded_vectorizer = pickle.load(file)

encoder_filename='label_encoder.pkl'
with open(encoder_filename,'rb')as file:
  loaded_label_encoder=pickle.load(file)

with open('model_pickle.pkl', 'rb') as file:
    loaded_model_dict = pickle.load(file)

loaded_model = loaded_model_dict['model']

text='nothing'
# text=preprocess(text)
array = loaded_vectorizer.transform([text]).toarray()

predictions = loaded_model.predict(array)

a=np.argmax(predictions, axis=1)
loaded_label_encoder.inverse_transform(a)[0]

"""Emotion Detection ENds here

Review Analysis
"""

import pandas as pd





filename = 'Oppo Reno 10 5G.xlsx'
df5 = pd.read_excel(filename)
df5

import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Data Extraction
# Replace 'your_excel_file.xlsx' with your actual Excel file path.
df = pd.read_excel('categorised_data2.xlsx')

# Step 2: Data Preparation
sentiment_scores = [1, 2, 3, 4, 5]
filtered_data = df[df['sentiment'].isin(sentiment_scores)]
review_counts = filtered_data['sentiment'].value_counts().sort_index()

# Step 3: Data Visualization
plt.bar(review_counts.index, review_counts.values)
plt.xlabel('Sentiment Score')
plt.ylabel('Number of Reviews')
plt.title('Bar Chart of Reviews by Sentiment Score')
plt.xticks(sentiment_scores)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Data Extraction
# Replace 'your_excel_file.xlsx' with your actual Excel file path.
df = pd.read_excel('categorised_data2.xlsx')

# Step 2: Data Preparation
good_reviews = df[df['category'] == 'good']
bad_reviews = df[df['category'] == 'bad']

# Count the number of reviews in each category
good_count = len(good_reviews)
bad_count = len(bad_reviews)

# Step 3: Data Visualization
categories = ['Good', 'Bad']
review_counts = [good_count, bad_count]

plt.bar(categories, review_counts)
plt.xlabel('Category')
plt.ylabel('Number of Reviews')
plt.title('Bar Chart of Reviews by Category')
plt.show()

import pandas as pd
filename = 'SAMSUNG Galaxy F34.xlsx'
df5 = pd.read_excel(filename)
df5

!pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio===0.8.1 -f https://download.pytorch.org/whl/torch_stable.html
!pip install transformers requests beautifulsoup4 pandas numpy

from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import requests
from bs4 import BeautifulSoup
import re

tokenizer = AutoTokenizer.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

model1 = AutoModelForSequenceClassification.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

def sentiment_score(review):
    tokens = tokenizer.encode(review, return_tensors='pt')
    result = model1(tokens)
    return int(torch.argmax(result.logits))+1

df5.rename(columns={'Pros': 'review'}, inplace=True)
df5

df5['sentiment'] = df5['review'].apply(lambda x: sentiment_score(x[:512]))

df5

text='nothing'
# text=preprocess(text)
array = loaded_vectorizer.transform([text]).toarray()

predictions = loaded_model.predict(array)

a=np.argmax(predictions, axis=1)
loaded_label_encoder.inverse_transform(a)[0]

def predict_emotion(text, model, cv, label_encoder):
    # Preprocess the input text
    # text = preprocess(text)

    # Transform the preprocessed text into a feature array
    array = loaded_vectorizer.transform([text]).toarray()

    predictions = loaded_model.predict(array)

    a=np.argmax(predictions, axis=1)
    return loaded_label_encoder.inverse_transform(a)[0]

df5['emotion_score'] = df5['review'].apply(lambda x: predict_emotion(x[:512],loaded_model,loaded_vectorizer,loaded_label_encoder))

df5

import pandas as pd

def categorize_reviews(df):
    for index, row in df.iterrows():
        sentiment = row['sentiment']
        emotion_score = row['emotion_score']

        if sentiment > 3 and (emotion_score == "joy" or emotion_score == "love" or emotion_score == "surprise"):
            df.at[index, 'category'] = 'good'
        elif sentiment <= 3 and (emotion_score == "sadness" or emotion_score == "anger"):
            df.at[index, 'category'] = 'bad'
        elif sentiment <= 3 and (emotion_score == "joy" or emotion_score == "love" or emotion_score == "surprise"):
            df.at[index, 'category'] = 'good'
        elif sentiment > 3 and (emotion_score == "sadness" or emotion_score == "anger"):
            df.at[index, 'category'] = 'bad'
    return df

# # Example usage:
# data = {
#     'sentiment': [4, 2, 5, 3, 1],
#     'emotion_score': ['joy', 'anger', 'love', 'sadness', 'surprise']
# }
# df = pd.DataFrame(data)

df5 = categorize_reviews(df5)

# print(df)

df5

excel_filename = 'SamsungGalaxyF34.xlsx'

# Save the DataFrame to an Excel file
df5.to_excel(excel_filename, index=False)

